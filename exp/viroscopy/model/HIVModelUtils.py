

"""
Keep some default parameters for the epidemic model. 
"""

class HIVModelUtils(object):
    def __init__(self): 
        pass 
    
    @staticmethod
    def defaultTheta(): 
        theta = [50, 1.0, 0.5, 1.0/800, 0.01, 0.05, 0.1, 38.0/1000, 30.0/1000, 170.0/1000]
        return theta 
        
    @staticmethod 
    def defaultSimulationParams(): 
        T = 1000.0
        recordStep = 90
        printStep = 10
        M = 2000
        
        return T, recordStep, printStep, M 
        

class HIVGraphMetrics(object): 
    def __init__(self, times):
        """
        A class to model metrics about and between HIVGraphs such as summary 
        statistics and distances. 
        
        :param times: An array of time points to compute statistics from 
        """
        
        self.times = times 

    @staticmethod
    def summary(graph): 
        """
        Compute a summary statistic on the input HIV graph         
        """
        summaryArray = numpy.zeros((times.shape[0], 0))

        for i in range(times.shape[0]): 
            t = times[i]
            subgraph = graph.subgraph(graph.infectedIndsAt(t))    
        
            summaryArray[i, :] = numpy.array([subgraph.getNumVertices(), subgraph.getNumEdges()])        
        
        return summaryArray
    
    @staticmethod 
    def distance(summary1, summary2): 
        """
        Take as input two summary statistics computed on HIV graphs, and output 
        a distance metric.
        
        :param summary1: A summary statistic for a desired HIVGraph. 
        
        :param summary2: A summary statistic for a modelled HIVGraph. 
        """        
        return numpy.linalg.norm(summary1, summary2)
    
    @staticmethod     
    def breakFunction(realSummary, graph, epsilon, summaryFunc, distanceFunc): 
        """
        Given a summary statistic realSummary, a graph created by the model and 
        a value of epsilon return True if the distance has exceeded epsilon 
        otherwise False. 

        :param realSummary: Summary statistic computed on real data 
        
        :param graph: The HIVGraph generated by the model. 
        :type graph: `exp.viroscopy.model.HIVGraph`
        
        :param epsilon: The maximum distance to be accepted. 
        
        """
        summary = summaryFunc(graph)

        dist = distanceFunc(summary, reaSummary)
        if dist > epsilon:
            logging.debug("Distance is " + str(dist) +  " and epsilon is " + str(epsilon))
            return True
        else:
            return False